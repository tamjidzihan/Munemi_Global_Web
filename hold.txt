

For Cpanel Routing:
<IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteBase /
  RewriteRule ^index\.html$ - [L]
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteRule . /index.html [L]
</IfModule>










import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { UserIcon } from '@heroicons/react/24/outline';
import CalendarIcon from '../common/CalendarIcon/CalendarIcon';
import AsyncSelect from 'react-select/async'; // Import AsyncSelect
import { StylesConfig } from 'react-select';
import apiClient from '../services/apiClient';

interface AirTicketBookingProps {
    className?: string;
}

type OptionType = {
    label: string;
    value: string;
};

export default function AirTicketBooking({ className }: AirTicketBookingProps) {
    const [tripType, setTripType] = useState<'one-way' | 'round-trip'>('one-way');
    const [startDate, setStartDate] = useState<Date | null>(new Date());
    const [endDate, setEndDate] = useState<Date | null>(null);
    const [travelers, setTravelers] = useState(1);
    const [origin, setOrigin] = useState<OptionType | null>(null);
    const [destination, setDestination] = useState<OptionType | null>(null);

    const navigate = useNavigate();

    const loadOptions = (inputValue: string, callback: (options: OptionType[]) => void) => {
        // Debounce the API call
        setTimeout(async () => {
            try {
                const response = await apiClient.get('/flightLocation', {
                    params: { search: inputValue },
                });
                const options = response.data.map((location: any) => ({
                    value: location.id,
                    label: `(${location.airportCode}) ${location.airportName}`,
                }));
                callback(options);
            } catch (err) {
                console.error('Failed to fetch flight locations', err);
                callback([]);
            }
        }, 300); // 300ms debounce
    };

    const handleBookFlight = () => {
        navigate('/booking', {
            state: {
                tripType,
                origin: origin?.label,
                destination: destination?.label,
                startDate,
                endDate,
                travelers,
            },
        });
    };

    const customStyles: StylesConfig<OptionType, false> = {
        control: (provided, state) => ({
            ...provided,
            borderColor: state.isFocused ? '#3b82f6' : '#e5e7eb',
            boxShadow: state.isFocused ? '0 0 0 1px #3b82f6' : 'none',
            '&:hover': {
                borderColor: '#3b82f6',
            },
            paddingLeft: '2rem',
            paddingTop: '0.4rem',
            paddingBottom: '0.4rem',
            borderRadius: '0.5rem',
        }),
    };

    return (
        <section className="relative -mt-16 max-w-7xl mx-auto px-4">
            <div className={`bg-white rounded-2xl p-6 shadow-xl mx-4 ${className}`}>
                <div className="flex gap-4 mb-6">
                    <label className="flex items-center gap-2 cursor-pointer">
                        <input
                            type="radio"
                            name="tripType"
                            value="one-way"
                            checked={tripType === 'one-way'}
                            onChange={(e) => setTripType(e.target.value as 'one-way')}
                            className="w-5 h-5 text-blue-600"
                        />
                        One Way
                    </label>
                    <label className="flex items-center gap-2 cursor-pointer">
                        <input
                            type="radio"
                            name="tripType"
                            value="round-trip"
                            checked={tripType === 'round-trip'}
                            onChange={(e) => setTripType(e.target.value as 'round-trip')}
                            className="w-5 h-5 text-blue-600"
                        />
                        Round Trip
                    </label>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    {/* Origin Dropdown */}
                    <div className="relative">
                        <AsyncSelect
                            loadOptions={loadOptions}
                            value={origin}
                            onChange={setOrigin}
                            placeholder="Flying From"
                            className="basic-single"
                            classNamePrefix="select"
                            styles={customStyles}
                        />
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="20"
                            height="20"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            className="absolute left-3 top-3.5 text-blue-400 pointer-events-none"
                        >
                            <path d="M2 22h20" />
                            <path d="M6.36 17.4 4 17l-2-4 1.1-.55a2 2 0 0 1 1.8 0l.17.1a2 2 0 0 0 1.8 0L8 12 5 6l.9-.45a2 2 0 0 1 2.09.2l4.02 3a2 2 0 0 0 2.1.2l4.19-2.06a2.41 2.41 0 0 1 1.73-.17L21 7a1.4 1.4 0 0 1 .87 1.99l-.38.76c-.23.46-.6.84-1.07 1.08L7.58 17.2a2 2 0 0 1-1.22.18Z" />
                        </svg>
                    </div>

                    {/* Destination Dropdown */}
                    <div className="relative">
                        <AsyncSelect
                            loadOptions={loadOptions}
                            value={destination}
                            onChange={setDestination}
                            placeholder="Flying To"
                            className="basic-single"
                            classNamePrefix="select"
                            styles={customStyles}
                        />
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="20"
                            height="20"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            className="absolute left-3 top-3.5 text-blue-400 pointer-events-none"
                        >
                            <path d="M2 22h20" />
                            <path d="M3.77 10.77 2 9l2-4.5 1.1.55c.55.28.9.84.9 1.45s.35 1.17.9 1.45L8 8.5l3-6 1.05.53a2 2 0 0 1 1.09 1.52l.72 5.4a2 2 0 0 0 1.09 1.52l4.4 2.2c.42.22.78.55 1.01.96l.6 1.03c.49.88-.06 1.98-1.06 2.1l-1.18.15c-.47.06-.95-.02-1.37-.24L4.29 11.15a2 2 0 0 1-.52-.38Z" />
                        </svg>
                    </div>

                    {/* Departure Date */}
                    <div className="relative">
                        <DatePicker
                            selected={startDate}
                            onChange={(date: SetStateAction<Date | null>) => setStartDate(date)}
                            startDate={startDate}
                            endDate={endDate}
                            placeholderText="Journey Date"
                            className="w-full pl-10 pr-20 py-3 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            minDate={new Date()}
                        />
                        <CalendarIcon className="w-5 h-5 text-blue-400 absolute left-3 top-3.5" />
                    </div>

                    {/* Return Date */}
                    {tripType === 'round-trip' && (
                        <div className="relative">
                            <DatePicker
                                selected={endDate}
                                onChange={(date) => setEndDate(date)}
                                placeholderText="Return Date"
                                className="w-full pl-10 pr-20 py-3 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                minDate={startDate || new Date()}
                            />
                            <CalendarIcon className="w-5 h-5 text-blue-400 absolute left-3 top-3.5" />
                        </div>
                    )}

                    {/* Travelers */}
                    <div className="relative flex items-center">
                        <UserIcon className="w-5 h-5 text-blue-400 absolute left-3" />
                        <select
                            value={travelers}
                            onChange={(e) => setTravelers(Number(e.target.value))}
                            className="pl-10 pr-4 py-3 w-full rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 appearance-none"
                        >
                            {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((num) => (
                                <option key={num} value={num}>
                                    {num} {num === 1 ? 'Traveler' : 'Travelers'}
                                </option>
                            ))}
                        </select>
                    </div>

                    {/* Search Button */}
                    <button
                        onClick={handleBookFlight}
                        disabled={!origin || !destination}
                        className="w-full place-self-center md:col-span-4 bg-blue-600 hover:bg-blue-700 text-white text-xl font-semibold py-3 px-8 rounded-lg transition-colors duration-200 cursor-pointer"
                    >
                        Book Flights
                    </button>
                </div>
            </div>
        </section>
    );
}










